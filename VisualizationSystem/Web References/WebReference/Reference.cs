//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18408.
// 
#pragma warning disable 1591

namespace VisualizationSystem.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ws", Namespace="http://tempuri.org/")]
    public partial class UserService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommandStringOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public UserService() {
            this.Url = "http://192.168.1.103/WCF/users.svc";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RegistrationCompletedEventHandler RegistrationCompleted;
        
        /// <remarks/>
        public event AuthorizationCompletedEventHandler AuthorizationCompleted;
        
        /// <remarks/>
        public event GetCommandStringCompletedEventHandler GetCommandStringCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IUserService/Registration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Registration([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out RegistrationState RegistrationResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool RegistrationResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string sessionCode) {
            object[] results = this.Invoke("Registration", new object[] {
                        login,
                        password});
            RegistrationResult = ((RegistrationState)(results[0]));
            RegistrationResultSpecified = ((bool)(results[1]));
            sessionCode = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void RegistrationAsync(string login, string password) {
            this.RegistrationAsync(login, password, null);
        }
        
        /// <remarks/>
        public void RegistrationAsync(string login, string password, object userState) {
            if ((this.RegistrationOperationCompleted == null)) {
                this.RegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegistrationOperationCompleted);
            }
            this.InvokeAsync("Registration", new object[] {
                        login,
                        password}, this.RegistrationOperationCompleted, userState);
        }
        
        private void OnRegistrationOperationCompleted(object arg) {
            if ((this.RegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegistrationCompleted(this, new RegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IUserService/Authorization", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Authorization([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out AuthorizationState AuthorizationResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AuthorizationResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string sessionCode) {
            object[] results = this.Invoke("Authorization", new object[] {
                        login,
                        password});
            AuthorizationResult = ((AuthorizationState)(results[0]));
            AuthorizationResultSpecified = ((bool)(results[1]));
            sessionCode = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void AuthorizationAsync(string login, string password) {
            this.AuthorizationAsync(login, password, null);
        }
        
        /// <remarks/>
        public void AuthorizationAsync(string login, string password, object userState) {
            if ((this.AuthorizationOperationCompleted == null)) {
                this.AuthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizationOperationCompleted);
            }
            this.InvokeAsync("Authorization", new object[] {
                        login,
                        password}, this.AuthorizationOperationCompleted, userState);
        }
        
        private void OnAuthorizationOperationCompleted(object arg) {
            if ((this.AuthorizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizationCompleted(this, new AuthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IUserService/GetCommandString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetCommandString(int i, [System.Xml.Serialization.XmlIgnoreAttribute()] bool iSpecified) {
            object[] results = this.Invoke("GetCommandString", new object[] {
                        i,
                        iSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCommandStringAsync(int i, bool iSpecified) {
            this.GetCommandStringAsync(i, iSpecified, null);
        }
        
        /// <remarks/>
        public void GetCommandStringAsync(int i, bool iSpecified, object userState) {
            if ((this.GetCommandStringOperationCompleted == null)) {
                this.GetCommandStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommandStringOperationCompleted);
            }
            this.InvokeAsync("GetCommandString", new object[] {
                        i,
                        iSpecified}, this.GetCommandStringOperationCompleted, userState);
        }
        
        private void OnGetCommandStringOperationCompleted(object arg) {
            if ((this.GetCommandStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommandStringCompleted(this, new GetCommandStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/DataRepository.Models")]
    public enum RegistrationState {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        LoginExist,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/DataRepository.Models")]
    public enum AuthorizationState {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        WrongLoginOrPassword,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RegistrationCompletedEventHandler(object sender, RegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RegistrationState RegistrationResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RegistrationState)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool RegistrationResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sessionCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AuthorizationCompletedEventHandler(object sender, AuthorizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuthorizationState AuthorizationResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthorizationState)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AuthorizationResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sessionCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCommandStringCompletedEventHandler(object sender, GetCommandStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommandStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommandStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591